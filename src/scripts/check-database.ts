// src/scripts/check-database.ts
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function checkDatabase() {
  try {
    console.log('üîÑ Verificando conex√£o com banco de dados...');
    console.log('üîó URL do banco:', process.env.DATABASE_URL ? 'Configurada ‚úÖ' : 'N√ÉO CONFIGURADA ‚ùå');
    
    // Testar conex√£o
    await prisma.$connect();
    console.log('‚úÖ Conex√£o com banco de dados estabelecida\n');
    
    // Verificar estrutura das tabelas
    console.log('üìã Verificando estrutura do banco...');
    
    // Contar registros em cada tabela
    const stats = await Promise.all([
      prisma.admin.count().catch(() => 0),
      prisma.cliente.count().catch(() => 0),
      prisma.produto.count().catch(() => 0),
      prisma.interacao.count().catch(() => 0)
    ]);

    console.log('üìä Estat√≠sticas do banco:');
    console.log(`üë• Administradores: ${stats[0]}`);
    console.log(`üë§ Clientes: ${stats[1]}`);
    console.log(`üõçÔ∏è  Produtos: ${stats[2]}`);
    console.log(`üí¨ Intera√ß√µes: ${stats[3]}\n`);

    // Verificar administradores detalhadamente
    if (stats[0] > 0) {
      console.log('üë• Administradores por n√≠vel:');
      
      const adminsPorNivel = await Promise.all([
        prisma.admin.count({ where: { nivelAcesso: 'SUPERADMIN' } }),
        prisma.admin.count({ where: { nivelAcesso: 'ADMIN' } }),
        prisma.admin.count({ where: { nivelAcesso: 'EDITOR' } })
      ]);

      console.log(`  üëë SUPERADMIN: ${adminsPorNivel[0]}`);
      console.log(`  üõ°Ô∏è  ADMIN: ${adminsPorNivel[1]}`);
      console.log(`  üìù EDITOR: ${adminsPorNivel[2]}\n`);

      // Listar todos os admins
      const admins = await prisma.admin.findMany({
        select: {
          id: true,
          nome: true,
          email: true,
          nivelAcesso: true,
          ultimoLogin: true,
          createdAt: true
        },
        orderBy: [
          { nivelAcesso: 'asc' },
          { createdAt: 'asc' }
        ]
      });

      console.log('üìã Lista de administradores:');
      admins.forEach(admin => {
        const ultimoLogin = admin.ultimoLogin 
          ? new Date(admin.ultimoLogin).toLocaleDateString('pt-BR')
          : 'Nunca';
        
        const emoji = admin.nivelAcesso === 'SUPERADMIN' ? 'üëë' : 
                     admin.nivelAcesso === 'ADMIN' ? 'üõ°Ô∏è' : 'üìù';
        
        console.log(`  ${emoji} ${admin.nome} (${admin.email})`);
        console.log(`    üÜî ID: ${admin.id} | üîê √öltimo login: ${ultimoLogin}`);
      });
      console.log();
    } else {
      console.log('‚ö†Ô∏è  Nenhum administrador encontrado!');
      console.log('üìñ Para criar administradores: npx ts-node src/scripts/create-all-admins.ts\n');
    }

    // Verificar se h√° dados de exemplo
    const temDadosExemplo = stats[1] > 0 && stats[2] > 0;
    
    if (!temDadosExemplo) {
      console.log('üí° Dicas:');
      console.log('‚Ä¢ Para popular com dados de exemplo: npx ts-node src/scripts/setup-complete.ts');
      console.log('‚Ä¢ Para criar apenas admins: npx ts-node src/scripts/create-all-admins.ts');
      console.log('‚Ä¢ Para limpar banco: npx ts-node src/scripts/reset-database.ts');
    }

    console.log('\nüîß Scripts dispon√≠veis:');
    console.log('‚Ä¢ npx ts-node src/scripts/list-admins.ts - Listar administradores');
    console.log('‚Ä¢ npx ts-node src/scripts/reset-admin-password.ts <email> - Resetar senha');
    console.log('‚Ä¢ npx ts-node src/scripts/delete-admin.ts <email> - Deletar admin');
    console.log('‚Ä¢ npx ts-node src/scripts/test-neon-connection.ts - Testar conex√£o');

  } catch (error) {
    console.error('‚ùå Erro ao verificar banco de dados:', error);
    console.log('\nüîß Poss√≠veis solu√ß√µes:');
    console.log('1. Verificar se a DATABASE_URL est√° correta no .env.local');
    console.log('2. Executar: npx prisma generate');
    console.log('3. Executar: npx prisma db push');
    console.log('4. Verificar conex√£o com internet/VPN');
  } finally {
    await prisma.$disconnect();
  }
}

checkDatabase();