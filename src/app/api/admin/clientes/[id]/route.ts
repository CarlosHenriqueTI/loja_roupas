import { NextRequest, NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import { verifyAdminAuth, checkAdminLevel } from '@/middleware/adminAuth';

const prisma = new PrismaClient();

// DELETE - Excluir cliente espec√≠fico (apenas SUPERADMIN)
export async function DELETE(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  const startTime = Date.now();
  
  try {
    console.log(`üóëÔ∏è [API] Iniciando exclus√£o do cliente ID: ${params.id}`);
    
    // ‚úÖ Verificar autentica√ß√£o admin
    const authResult = await verifyAdminAuth(request);
    
    if (!authResult.success) {
      console.error('‚ùå [API] Falha na autentica√ß√£o:', authResult.error);
      return NextResponse.json(
        { success: false, error: authResult.error },
        { status: authResult.status || 401 }
      );
    }

    console.log(`üîë [API] Admin autenticado: ${authResult.admin?.nome} (${authResult.admin?.nivelAcesso})`);

    // ‚úÖ Verificar se admin tem permiss√£o para deletar clientes (apenas SUPERADMIN)
    if (!checkAdminLevel(authResult.admin!.nivelAcesso, 'SUPERADMIN')) {
      console.error('‚ùå [API] N√≠vel de acesso insuficiente para deletar cliente');
      return NextResponse.json(
        { success: false, error: 'Acesso negado - Apenas SUPERADMIN pode excluir clientes' },
        { status: 403 }
      );
    }

    const clienteId = parseInt(params.id);

    if (isNaN(clienteId)) {
      console.error('‚ùå [API] ID de cliente inv√°lido:', params.id);
      return NextResponse.json(
        { success: false, error: 'ID de cliente inv√°lido' },
        { status: 400 }
      );
    }

    // ‚úÖ Verificar se cliente existe
    const cliente = await prisma.cliente.findUnique({
      where: { id: clienteId },
      include: {
        _count: {
          select: {
            interacoes: true
          }
        }
      }
    });

    if (!cliente) {
      console.error('‚ùå [API] Cliente n√£o encontrado:', clienteId);
      return NextResponse.json(
        { success: false, error: 'Cliente n√£o encontrado' },
        { status: 404 }
      );
    }

    console.log(`üìã [API] Cliente encontrado: ${cliente.nome} com ${cliente._count.interacoes} intera√ß√µes`);

    // ‚úÖ Deletar intera√ß√µes primeiro (se existirem)
    if (cliente._count.interacoes > 0) {
      console.log(`üîó [API] Deletando ${cliente._count.interacoes} intera√ß√µes do cliente...`);
      
      const deletedInteracoes = await prisma.interacao.deleteMany({
        where: { clienteId }
      });
      
      console.log(`‚úÖ [API] ${deletedInteracoes.count} intera√ß√µes deletadas`);
    }

    // ‚úÖ Deletar cliente
    console.log(`üóëÔ∏è [API] Deletando cliente: ${cliente.nome}`);
    
    const deletedCliente = await prisma.cliente.delete({
      where: { id: clienteId }
    });

    const totalTime = Date.now() - startTime;
    console.log(`‚úÖ [API] Cliente ${cliente.nome} (ID: ${clienteId}) exclu√≠do com sucesso em ${totalTime}ms`);

    return NextResponse.json({
      success: true,
      message: 'Cliente exclu√≠do com sucesso',
      data: {
        id: deletedCliente.id,
        nome: deletedCliente.nome,
        email: deletedCliente.email,
        interacoesRemovidas: cliente._count.interacoes
      },
      meta: {
        executionTime: totalTime,
        adminId: authResult.admin?.adminId,
        timestamp: new Date().toISOString()
      }
    });

  } catch (error) {
    const totalTime = Date.now() - startTime;
    console.error(`‚ùå [API] Erro ao excluir cliente (${totalTime}ms):`, error);
    
    if (error instanceof Error) {
      console.error('‚ùå [API] Stack trace:', error.stack);
    }
    
    return NextResponse.json(
      { 
        success: false, 
        error: 'Erro interno do servidor ao excluir cliente',
        details: process.env.NODE_ENV === 'development' ? error : undefined
      },
      { status: 500 }
    );
  } finally {
    await prisma.$disconnect();
  }
}

// GET - Obter cliente espec√≠fico
export async function GET(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    console.log(`üìã [API] Buscando cliente ID: ${params.id}`);
    
    // ‚úÖ Verificar autentica√ß√£o admin
    const authResult = await verifyAdminAuth(request);
    
    if (!authResult.success) {
      console.error('‚ùå [API] Falha na autentica√ß√£o:', authResult.error);
      return NextResponse.json(
        { success: false, error: authResult.error },
        { status: authResult.status || 401 }
      );
    }

    // ‚úÖ Verificar se admin tem permiss√£o para ver clientes
    if (!checkAdminLevel(authResult.admin!.nivelAcesso, 'EDITOR')) {
      console.error('‚ùå [API] N√≠vel de acesso insuficiente');
      return NextResponse.json(
        { success: false, error: 'Acesso negado - N√≠vel insuficiente' },
        { status: 403 }
      );
    }

    const clienteId = parseInt(params.id);

    if (isNaN(clienteId)) {
      return NextResponse.json(
        { success: false, error: 'ID de cliente inv√°lido' },
        { status: 400 }
      );
    }

    const cliente = await prisma.cliente.findUnique({
      where: { id: clienteId },
      include: {
        _count: {
          select: {
            interacoes: true
          }
        },
        interacoes: {
          take: 10,
          orderBy: { createdAt: 'desc' },
          select: {
            id: true,
            tipo: true,
            createdAt: true
          }
        }
      }
    });

    if (!cliente) {
      return NextResponse.json(
        { success: false, error: 'Cliente n√£o encontrado' },
        { status: 404 }
      );
    }

    return NextResponse.json({
      success: true,
      data: cliente
    });

  } catch (error) {
    console.error('‚ùå [API] Erro ao buscar cliente:', error);
    
    return NextResponse.json(
      { 
        success: false, 
        error: 'Erro interno do servidor ao buscar cliente'
      },
      { status: 500 }
    );
  } finally {
    await prisma.$disconnect();
  }
}